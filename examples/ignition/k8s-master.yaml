---
systemd:
  units:
    - name: etcd2.service
      enable: true
      dropins:
        - name: 40-etcd-cluster.conf
          contents: |
            [Service]
            Environment="ETCD_NAME={{.etcd_name}}"
            Environment="ETCD_ADVERTISE_CLIENT_URLS=http://{{.domain_name}}:2379"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=http://{{.domain_name}}:2380"
            Environment="ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
            Environment="ETCD_LISTEN_PEER_URLS=http://{{.domain_name}}:2380"
            Environment="ETCD_INITIAL_CLUSTER={{.etcd_initial_cluster}}"
            Environment="ETCD_STRICT_RECONFIG_CHECK=true"
    - name: flanneld.service
      dropins:
        - name: 40-ExecStartPre-symlink.conf
          contents: |
            [Service]
            EnvironmentFile=-/etc/flannel/options.env
            ExecStartPre=/opt/init-flannel
    - name: docker.service
      dropins:
        - name: 40-flannel.conf
          contents: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: k8s-certs@.service
      contents: |
        [Unit]
        Description=Fetch Kubernetes certificate assets
        Requires=network-online.target
        After=network-online.target
        [Service]
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStart=/usr/bin/bash -c "[ -f /etc/kubernetes/ssl/%i ] || curl {{.k8s_cert_endpoint}}/tls/%i -o /etc/kubernetes/ssl/%i"
    - name: k8s-assets.target
      contents: |
        [Unit]
        Description=Load Kubernetes Assets
        Requires=k8s-certs@apiserver.pem.service
        After=k8s-certs@apiserver.pem.service
        Requires=k8s-certs@apiserver-key.pem.service
        After=k8s-certs@apiserver-key.pem.service
        Requires=k8s-certs@ca.pem.service
        After=k8s-certs@ca.pem.service
    - name: kubelet.service
      enable: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        Wants=flanneld.service
        Requires=k8s-assets.target
        After=k8s-assets.target
        [Service]
        Environment="RKT_OPTS=--volume=resolv,kind=host,source=/etc/resolv.conf --mount volume=resolv,target=/etc/resolv.conf --volume var-log,kind=host,source=/var/log --mount volume=var-log,target=/var/log"
        Environment=KUBELET_VERSION=v1.3.4_coreos.0
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=http://127.0.0.1:8080 \
          --register-schedulable=true \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --hostname-override={{.domain_name}} \
          --cluster_dns={{.k8s_dns_service_ip}} \
          --cluster_domain=cluster.local
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: k8s-addons.service
      enable: true
      contents: |
        [Unit]
        Description=Kubernetes Addons
        [Service]
        Type=oneshot
        ExecStart=/opt/k8s-addons
        [Install]
        WantedBy=multi-user.target

storage:
  {{ if index . "pxe" }}
  disks:
    - device: /dev/sda
      wipe_table: true
      partitions:
        - label: ROOT
  filesystems:
    - name: rootfs
      mount:
        device: "/dev/sda1"
        format: "ext4"
        create:
          force: true
          options:
            - "-LROOT"
  {{else}}
  filesystems:
    - name: rootfs
      mount:
        device: "/dev/disk/by-label/ROOT"
        format: "ext4"
  {{end}}
  files:
    - path: /etc/kubernetes/manifests/kube-proxy.yaml
      filesystem: rootfs
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-proxy
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-proxy
              image: quay.io/coreos/hyperkube:v1.3.4_coreos.0
              command:
              - /hyperkube
              - proxy
              - --master=http://127.0.0.1:8080
              securityContext:
                privileged: true
              volumeMounts:
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
    - path: /etc/kubernetes/manifests/kube-apiserver.yaml
      filesystem: rootfs
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-apiserver
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-apiserver
              image: quay.io/coreos/hyperkube:v1.3.4_coreos.0
              command:
              - /hyperkube
              - apiserver
              - --bind-address=0.0.0.0
              - --etcd-servers={{.k8s_etcd_endpoints}}
              - --allow-privileged=true
              - --service-cluster-ip-range={{.k8s_service_ip_range}}
              - --secure-port=443
              - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota
              - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
              - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --client-ca-file=/etc/kubernetes/ssl/ca.pem
              - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --runtime-config=extensions/v1beta1/networkpolicies=true
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  port: 8080
                  path: /healthz
                initialDelaySeconds: 15
                timeoutSeconds: 15
              ports:
              - containerPort: 443
                hostPort: 443
                name: https
              - containerPort: 8080
                hostPort: 8080
                name: local
              volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
    - path: /etc/flannel/options.env
      filesystem: rootfs
      contents:
        inline: |
          FLANNELD_ETCD_ENDPOINTS={{.k8s_etcd_endpoints}}
    - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
      filesystem: rootfs
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-controller-manager
            namespace: kube-system
          spec:
            containers:
            - name: kube-controller-manager
              image: quay.io/coreos/hyperkube:v1.3.4_coreos.0
              command:
              - /hyperkube
              - controller-manager
              - --master=http://127.0.0.1:8080
              - --leader-elect=true
              - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
              - --root-ca-file=/etc/kubernetes/ssl/ca.pem
              resources:
                requests:
                  cpu: 200m
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10252
                initialDelaySeconds: 15
                timeoutSeconds: 15
              volumeMounts:
              - mountPath: /etc/kubernetes/ssl
                name: ssl-certs-kubernetes
                readOnly: true
              - mountPath: /etc/ssl/certs
                name: ssl-certs-host
                readOnly: true
            hostNetwork: true
            volumes:
            - hostPath:
                path: /etc/kubernetes/ssl
              name: ssl-certs-kubernetes
            - hostPath:
                path: /usr/share/ca-certificates
              name: ssl-certs-host
    - path: /etc/kubernetes/manifests/kube-scheduler.yaml
      filesystem: rootfs
      contents:
        inline: |
          apiVersion: v1
          kind: Pod
          metadata:
            name: kube-scheduler
            namespace: kube-system
          spec:
            hostNetwork: true
            containers:
            - name: kube-scheduler
              image: quay.io/coreos/hyperkube:v1.3.4_coreos.0
              command:
              - /hyperkube
              - scheduler
              - --master=http://127.0.0.1:8080
              - --leader-elect=true
              resources:
                requests:
                  cpu: 100m
              livenessProbe:
                httpGet:
                  host: 127.0.0.1
                  path: /healthz
                  port: 10251
                initialDelaySeconds: 15
                timeoutSeconds: 15
    - path: /srv/kubernetes/manifests/kube-dns-rc.json
      filesystem: rootfs
      contents:
        inline: |
          {
            "apiVersion": "v1",
            "kind": "ReplicationController",
            "metadata": {
              "labels": {
                "k8s-app": "kube-dns",
                "kubernetes.io/cluster-service": "true",
                "version": "v15"
              },
              "name": "kube-dns-v15",
              "namespace": "kube-system"
            },
            "spec": {
              "replicas": 1,
              "selector": {
                  "k8s-app": "kube-dns",
                  "version": "v15"
              },
              "template": {
                "metadata": {
                  "labels": {
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v15"
                  }
                },
                "spec": {
                  "containers": [
                      {
                        "args": [
                          "--domain=cluster.local.",
                          "--dns-port=10053"
                        ],
                        "image": "gcr.io/google_containers/kubedns-amd64:1.3",
                        "livenessProbe": {
                          "failureThreshold": 5,
                          "httpGet": {
                            "path": "/healthz",
                            "port": 8080,
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 60,
                          "successThreshold": 1,
                          "timeoutSeconds": 5
                        },
                        "name": "kubedns",
                        "ports": [
                          {
                            "containerPort": 10053,
                            "name": "dns-local",
                            "protocol": "UDP"
                          },
                          {
                            "containerPort": 10053,
                            "name": "dns-tcp-local",
                            "protocol": "TCP"
                          }
                        ],
                        "readinessProbe": {
                          "httpGet": {
                            "path": "/readiness",
                            "port": 8081,
                            "scheme": "HTTP"
                          },
                          "initialDelaySeconds": 30,
                          "timeoutSeconds": 5
                        },
                        "resources": {
                          "limits": {
                            "cpu": "100m",
                            "memory": "200Mi"
                          },
                          "requests": {
                            "cpu": "100m",
                            "memory": "50Mi"
                          }
                        }
                      },
                      {
                        "args": [
                          "--cache-size=1000",
                          "--no-resolv",
                          "--server=127.0.0.1#10053"
                        ],
                        "image": "gcr.io/google_containers/kube-dnsmasq-amd64:1.3",
                        "name": "dnsmasq",
                        "ports": [
                          {
                            "containerPort": 53,
                            "name": "dns",
                            "protocol": "UDP"
                          },
                          {
                            "containerPort": 53,
                            "name": "dns-tcp",
                            "protocol": "TCP"
                          }
                        ]
                      },
                      {
                        "args": [
                          "-cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null",
                          "-port=8080",
                          "-quiet"
                        ],
                        "image": "gcr.io/google_containers/exechealthz-amd64:1.0",
                        "name": "healthz",
                        "ports": [
                          {
                            "containerPort": 8080,
                            "protocol": "TCP"
                          }
                        ],
                        "resources": {
                          "limits": {
                            "cpu": "10m",
                            "memory": "20Mi"
                          },
                          "requests": {
                            "cpu": "10m",
                            "memory": "20Mi"
                          }
                        }
                      }
                  ],
                  "dnsPolicy": "Default"
                }
              }
            }
          }
    - path: /srv/kubernetes/manifests/kube-dns-svc.json
      filesystem: rootfs
      contents:
        inline: |
          {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
              "labels": {
                "k8s-app": "kube-dns",
                "kubernetes.io/cluster-service": "true",
                "kubernetes.io/name": "KubeDNS"
              },
              "name": "kube-dns",
              "namespace": "kube-system"
            },
            "spec": {
              "clusterIP": "{{.k8s_dns_service_ip}}",
              "ports": [
                {
                  "name": "dns",
                  "port": 53,
                  "protocol": "UDP"
                },
                {
                  "name": "dns-tcp",
                  "port": 53,
                  "protocol": "TCP"
                }
              ],
              "selector": {
                "k8s-app": "kube-dns"
              }
            }
          }
    - path: /srv/kubernetes/manifests/heapster-deployment.json
      filesystem: rootfs
      contents:
        inline: |
          {
            "apiVersion": "extensions/v1beta1",
            "kind": "Deployment",
            "metadata": {
              "labels": {
                "k8s-app": "heapster",
                "kubernetes.io/cluster-service": "true",
                "version": "v1.1.0"
              },
              "name": "heapster-v1.1.0",
              "namespace": "kube-system"
            },
            "spec": {
              "replicas": 1,
              "selector": {
                "matchLabels": {
                  "k8s-app": "heapster",
                  "version": "v1.1.0"
                }
              },
              "template": {
                "metadata": {
                  "labels": {
                    "k8s-app": "heapster",
                    "version": "v1.1.0"
                  }
                },
                "spec": {
                  "containers": [
                    {
                      "command": [
                        "/heapster",
                        "--source=kubernetes.summary_api:''"
                      ],
                      "image": "gcr.io/google_containers/heapster:v1.1.0",
                      "name": "heapster",
                      "resources": {
                        "limits": {
                          "cpu": "100m",
                          "memory": "200Mi"
                        },
                        "requests": {
                          "cpu": "100m",
                          "memory": "200Mi"
                        }
                      }
                    },
                    {
                      "command": [
                        "/pod_nanny",
                        "--cpu=100m",
                        "--extra-cpu=0.5m",
                        "--memory=200Mi",
                        "--extra-memory=4Mi",
                        "--threshold=5",
                        "--deployment=heapster-v1.1.0",
                        "--container=heapster",
                        "--poll-period=300000",
                        "--estimator=exponential"
                      ],
                      "env": [
                        {
                          "name": "MY_POD_NAME",
                          "valueFrom": {
                            "fieldRef": {
                              "fieldPath": "metadata.name"
                            }
                          }
                        },
                        {
                          "name": "MY_POD_NAMESPACE",
                          "valueFrom": {
                            "fieldRef": {
                              "fieldPath": "metadata.namespace"
                            }
                          }
                        }
                      ],
                      "image": "gcr.io/google_containers/addon-resizer:1.3",
                      "name": "heapster-nanny",
                      "resources": {
                        "limits": {
                          "cpu": "50m",
                          "memory": "100Mi"
                        },
                        "requests": {
                          "cpu": "50m",
                          "memory": "100Mi"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
    - path: /srv/kubernetes/manifests/heapster-svc.json
      filesystem: rootfs
      contents:
        inline: |
          {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
              "labels": {
                "kubernetes.io/cluster-service": "true",
                "kubernetes.io/name": "Heapster"
              },
              "name": "heapster",
              "namespace": "kube-system"
            },
            "spec": {
              "ports": [
                {
                  "port": 80,
                  "targetPort": 8082
                }
              ],
              "selector": {
                "k8s-app": "heapster"
              }
            }
          }
    - path: /srv/kubernetes/manifests/kube-dashboard-rc.json
      filesystem: rootfs
      contents:
        inline: |
          {
            "apiVersion": "v1",
            "kind": "ReplicationController",
            "metadata": {
              "labels": {
                "k8s-app": "kubernetes-dashboard",
                "kubernetes.io/cluster-service": "true",
                "version": "v1.1.0"
              },
              "name": "kubernetes-dashboard-v1.1.0",
              "namespace": "kube-system"
            },
            "spec": {
              "replicas": 1,
              "selector": {
                "k8s-app": "kubernetes-dashboard"
              },
              "template": {
                "metadata": {
                  "labels": {
                    "k8s-app": "kubernetes-dashboard",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v1.1.0"
                  }
                },
                "spec": {
                  "containers": [
                    {
                      "image": "gcr.io/google_containers/kubernetes-dashboard-amd64:v1.1.0",
                      "livenessProbe": {
                        "httpGet": {
                          "path": "/",
                          "port": 9090
                        },
                        "initialDelaySeconds": 30,
                        "timeoutSeconds": 30
                      },
                      "name": "kubernetes-dashboard",
                      "ports": [
                        {
                          "containerPort": 9090
                        }
                      ],
                      "resources": {
                        "limits": {
                          "cpu": "100m",
                          "memory": "50Mi"
                        },
                        "requests": {
                          "cpu": "100m",
                          "memory": "50Mi"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
    - path: /srv/kubernetes/manifests/kube-dashboard-svc.json
      filesystem: rootfs
      contents:
        inline: |
          {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
              "labels": {
                "k8s-app": "kubernetes-dashboard",
                "kubernetes.io/cluster-service": "true"
              },
              "name": "kubernetes-dashboard",
              "namespace": "kube-system"
            },
            "spec": {
              "ports": [
                {
                  "port": 80,
                  "targetPort": 9090
                }
              ],
              "selector": {
                "k8s-app": "kubernetes-dashboard"
              }
            }
          }
    - path: /opt/init-flannel
      filesystem: rootfs
      mode: 0544
      contents:
        inline: |
          #!/bin/bash -ex
          function init_flannel {
            echo "Waiting for etcd..."
            while true
            do
                IFS=',' read -ra ES <<< "{{.k8s_etcd_endpoints}}"
                for ETCD in "${ES[@]}"; do
                    echo "Trying: $ETCD"
                    if [ -n "$(curl --silent "$ETCD/v2/machines")" ]; then
                        local ACTIVE_ETCD=$ETCD
                        break
                    fi
                    sleep 1
                done
                if [ -n "$ACTIVE_ETCD" ]; then
                    break
                fi
            done
            RES=$(curl --silent -X PUT -d "value={\"Network\":\"{{.k8s_pod_network}}\",\"Backend\":{\"Type\":\"vxlan\"}}" "$ACTIVE_ETCD/v2/keys/coreos.com/network/config?prevExist=false")
            if [ -z "$(echo $RES | grep '"action":"create"')" ] && [ -z "$(echo $RES | grep 'Key already exists')" ]; then
                echo "Unexpected error configuring flannel pod network: $RES"
            fi
          }
          init_flannel
    - path: /opt/k8s-addons
      filesystem: rootfs
      mode: 0544
      contents:
        inline: |
          #!/bin/bash -ex
          echo "Waiting for Kubernetes API..."
          until curl --silent "http://127.0.0.1:8080/version"
          do
            sleep 5
          done
          echo "K8S: DNS addon"
          curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat /srv/kubernetes/manifests/kube-dns-rc.json)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/replicationcontrollers" > /dev/null
          curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat /srv/kubernetes/manifests/kube-dns-svc.json)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services" > /dev/null
          echo "K8S: Heapster addon"
          curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat /srv/kubernetes/manifests/heapster-deployment.json)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/kube-system/deployments"
          curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat /srv/kubernetes/manifests/heapster-svc.json)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services"
          echo "K8S: Dashboard addon"
          curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat /srv/kubernetes/manifests/kube-dashboard-rc.json)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/replicationcontrollers" > /dev/null
          curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat /srv/kubernetes/manifests/kube-dashboard-svc.json)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services" > /dev/null

{{ if index . "ssh_authorized_keys" }}
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        {{ range $element := .ssh_authorized_keys }}
        - {{$element}}
        {{end}}
{{end}}
